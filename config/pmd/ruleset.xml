<?xml version="1.0"?>
<!--
  ~ Copyright 2015 Vincent Brison.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Android Application Rules"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">

    <description>Custom ruleset for Android application</description>

    <exclude-pattern>.*/R.java</exclude-pattern>
    <exclude-pattern>.*/gen/.*</exclude-pattern>
    <exclude-pattern>.*\.kt</exclude-pattern>
    <exclude-pattern>.*\.R\$.*</exclude-pattern>
    <exclude-pattern>.*Test.*</exclude-pattern>
    <exclude-pattern>.*renderthread.*</exclude-pattern>

    <rule ref="rulesets/java/strictexception.xml">
        <!-- Ignored because of the Callable pattern -->
        <exclude name="SignatureDeclareThrowsException"/>
    </rule>
    <rule ref="rulesets/java/typeresolution.xml">
        <!-- Ignored because of the Callable pattern -->
        <exclude name="SignatureDeclareThrowsException"/>
    </rule>
    <rule ref="rulesets/java/naming.xml/ShortMethodName">
        <properties>
            <property name="xpath">
                <value>
                    //MethodDeclarator[string-length(@Image) &lt; 2]
                </value>
            </property>
        </properties>
    </rule>
    <rule ref="rulesets/java/design.xml">
        <exclude name="TooFewBranchesForASwitchStatement"/>
        <exclude name="EmptyMethodInAbstractClassShouldBeAbstract"/>
        <exclude name="FieldDeclarationsShouldBeAtStartOfClass"/>
        <exclude name="ConfusingTernary"/>
    </rule>
    <rule ref="rulesets/java/unusedcode.xml"/>
    <!-- Suppress ImmutableField check for Api models -->
    <rule ref="rulesets/java/design.xml/ImmutableField">
        <properties>
            <property name="violationSuppressXPath"
                value="//ClassOrInterfaceDeclaration[starts-with(@Image, 'Api')]//FieldDeclaration"/>
        </properties>
    </rule>
    <rule ref="rulesets/java/migrating.xml"/>
    <rule ref="rulesets/java/optimizations.xml">
        <exclude name="LocalVariableCouldBeFinal"/>
        <exclude name="MethodArgumentCouldBeFinal"/>
        <exclude name="AvoidInstantiatingObjectsInLoops"/>
    </rule>
    <rule ref="rulesets/java/sunsecure.xml"/>
    <rule ref="rulesets/java/coupling.xml">
        <exclude name="LoosePackageCoupling"/>
        <!-- LawOfDemeter seems to be bugged -->
        <exclude name="LawOfDemeter"/>
    </rule>
    <rule ref="rulesets/java/codesize.xml">
        <exclude name="TooManyMethods"/>
        <exclude name="TooManyFields"/>
    </rule>

    <!-- Suppress ExcessiveParameterList check for Api models ctors and factory methods -->
    <rule ref="rulesets/java/codesize.xml/ExcessiveParameterList">
        <properties>
            <property name="violationSuppressXPath"
                value="//ClassOrInterfaceDeclaration[starts-with(@Image, 'Api')]//MethodDeclaration[@Static = 'true' and @Private = 'false'] | //ClassOrInterfaceDeclaration[starts-with(@Image, 'Api')]//ConstructorDeclaration"/>
        </properties>
    </rule>

    <!-- Suppress CyclomaticComplexity check for equals and hashCode -->
    <rule ref="rulesets/java/codesize.xml/CyclomaticComplexity">
        <properties>
            <property name="violationSuppressXPath"
                value="//MethodDeclarator[@Image='equals' or @Image='hashCode']"/>
        </properties>
    </rule>

    <!-- Suppress ModifiedCyclomaticComplexity check for equals and hashCode -->
    <rule ref="rulesets/java/codesize.xml/ModifiedCyclomaticComplexity">
        <properties>
            <property name="violationSuppressXPath"
                value="//MethodDeclarator[@Image='equals' or @Image='hashCode']"/>
        </properties>
    </rule>

    <!-- Suppress StdCyclomaticComplexity check for equals and hashCode -->
    <rule ref="rulesets/java/codesize.xml/StdCyclomaticComplexity">
        <properties>
            <property name="violationSuppressXPath"
                value="//MethodDeclarator[@Image='equals' or @Image='hashCode']"/>
        </properties>
    </rule>

    <!-- Suppress NPathComplexity check for equals and hashCode -->
    <rule ref="rulesets/java/codesize.xml/NPathComplexity">
        <properties>
            <property name="violationSuppressXPath"
                value="//MethodDeclarator[@Image='equals' or @Image='hashCode']"/>
        </properties>
    </rule>
    <rule ref="rulesets/java/android.xml"/>
    <rule ref="rulesets/java/clone.xml"/>
    <rule ref="rulesets/java/finalizers.xml"/>
    <rule ref="rulesets/java/imports.xml">
        <!-- Espresso is designed this way !-->
        <exclude name="TooManyStaticImports"/>
    </rule>
    <rule ref="rulesets/java/logging-java.xml"/>
    <rule ref="rulesets/java/braces.xml"/>
    <rule ref="rulesets/java/strings.xml"/>
    <rule ref="rulesets/java/basic.xml"/>
    <rule ref="rulesets/java/naming.xml">
        <exclude name="AbstractNaming"/>
        <exclude name="LongVariable"/>
        <exclude name="ShortVariable"/>
        <exclude name="VariableNamingConventions"/>
        <exclude name="MethodNamingConventions"/>
    </rule>
    <rule ref="rulesets/java/strings.xml">
        <exclude name="AppendCharacterWithChar"/>
    </rule>
</ruleset>
